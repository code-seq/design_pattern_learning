要使用 C# 读取 ZIP 文件并按照 ZIP 文件的结构创建文件夹和文件，可以使用 .NET Framework 或 .NET Core 中提供的 `System.IO.Compression` 命名空间。以下是一个示例代码：

```csharp
using System;
using System.IO;
using System.IO.Compression;

class Program
{
    static void Main()
    {
        string zipFilePath = "path/to/your/zip/file.zip";
        string destinationFolderPath = "path/to/destination/folder";

        // 创建目标文件夹
        Directory.CreateDirectory(destinationFolderPath);

        // 打开 ZIP 文件并遍历其中的文件和文件夹
        using (ZipArchive archive = ZipFile.OpenRead(zipFilePath))
        {
            foreach (ZipArchiveEntry entry in archive.Entries)
            {
                string entryDestinationPath = Path.Combine(destinationFolderPath, entry.FullName);

                // 如果是文件夹，则创建对应文件夹
                if (entry.FullName.EndsWith("/"))
                {
                    Directory.CreateDirectory(entryDestinationPath);
                }
                else
                {
                    // 创建文件夹（如果需要）
                    Directory.CreateDirectory(Path.GetDirectoryName(entryDestinationPath));

                    // 解压文件
                    entry.ExtractToFile(entryDestinationPath, true);
                }
            }
        }

        Console.WriteLine("ZIP 文件解压完成。");
    }
}
```

请注意，替换 `zipFilePath` 和 `destinationFolderPath` 为你实际使用的 ZIP 文件路径和目标文件夹路径。

上述示例代码中，我们首先创建目标文件夹（如果不存在）。然后，使用 `ZipFile.OpenRead` 方法打开 ZIP 文件，并遍历其中的每个条目（文件或文件夹）。对于每个条目，我们根据其完整路径在目标文件夹中创建相应的文件夹或文件。

如果条目是文件夹（以 "/" 结尾），我们使用 `Directory.CreateDirectory` 创建对应的文件夹。如果条目是文件，我们首先使用 `Path.GetDirectoryName` 创建文件所在的文件夹（如果需要），然后使用 `entry.ExtractToFile` 方法将文件解压到目标文件夹中。

最后，我们输出一条消息表示 ZIP 文件解压完成。

这个示例演示了如何使用 C# 读取 ZIP 文件并按照 ZIP 文件的结构创建文件夹和文件。

希望对你有所帮助！如果还有其他问题，请随时提问。
